var GuidHelper = require('../guid');

var permissionsServiceClient = function(cy) {

    this.getProtectedContextRegistration = function(resourceName, registrationName, accessToken){
        return cy.request({
            method: 'GET',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/protectedcontextregistrations?organizationid=1&searchString=${resourceName}`,
            headers: {
                Authorization: `Bearer ${accessToken}`,
            }
        })
            .then((response) => {
                var registrations = response.body.data;
                return registrations.filter((registration) => registration.attributes.registrationName === registrationName)[0];
            });
    };

    this.createPermissionProfile = function(permissionProfile, orgId, idmAdministratorAccessToken){
        return cy.request({
            method: 'POST',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/permissionprofiles?organizationid=${orgId}`,
            body: {
                data: {
                    type: 'permissionProfile',
                    attributes: permissionProfile
                }
            },
            headers: {
                Authorization: `Bearer ${idmAdministratorAccessToken}`,
            }
        })
            .then((response) => {
                return response.body;
            });
    };

    this.createPermissionSet = function(permissionProfileId, permissionSet, idmAdministratorAccessToken){
        return cy.request({
            method: 'POST',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/permissionprofiles/${permissionProfileId}/permissionsets`,
            body: {
                data: {
                    type: 'permissionSets',
                    attributes: permissionSet
                }
            },
            headers: {
                Authorization: `Bearer ${idmAdministratorAccessToken}`,
            }
        })
            .then((response) => {
                return response.body;
            });
    };

    this.getPermissionProfile = function(id, accessToken){
        return cy.request({
            method: 'GET',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/PermissionProfiles/${id}?include=permissionSets`,
            headers: {
                Authorization: `Bearer ${accessToken}`,
            }
        })
            .then((response) => {
                return response.body;
            });
    };

    this.createPermissionProfileWithSets = function(permissionProfile, orgId, idmAdministratorAccessToken){
        var createdProfile;

        return this.createPermissionProfile(permissionProfile, orgId, idmAdministratorAccessToken)
            .then((createdProfileArg) => {
                createdProfile = createdProfileArg;

                var createPromises = permissionProfile.permissionSets.map(
                    (permissionSet) => this.createPermissionSet(createdProfile.data.id, permissionSet, idmAdministratorAccessToken));

                return Promise.all(createPromises);
            })
            .then((permissionSets) => {
                return this.getPermissionProfile(createdProfile.data.id, idmAdministratorAccessToken);
            });
    };

    this.createSecurityGroup = function(securityGroup, orgId, accessToken){
        return cy.request({
            method: 'POST',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/securitygroups?organizationid=${orgId}`,
            body: {
                data: {
                    type: 'securityGroup',
                    attributes: securityGroup
                }
            },
            headers: {
                Authorization: `Bearer ${accessToken}`,
            }
        })
            .then((response) => {
                return response.body;
            });
    };

    this.createSecurityScope = function(securityGroupId, securityScopes, accessToken){
        return cy.request({
            method: 'POST',
            url: Cypress.env("fcServicesBaseUrl") + `/PermissionApi/api/securitygroups/${securityGroupId}/securityscopes`,
            body: {
                data: {
                    type: 'securityScopes',
                    attributes: securityScopes
                }
            },
            headers: {
                Authorization: `Bearer ${accessToken}`,
            }
        })
            .then((response) => {
                return response.body;
            });
    };

    this.createSecurityGroupWithScopes = function(securityGroup, orgId, idmAdministratorAccessToken){
        var createdSecurityGroup;

        return this.createSecurityGroup(securityGroup, orgId, idmAdministratorAccessToken)
            .then((createdSecurityGroupArg) => {
                createdSecurityGroup = createdSecurityGroupArg;

                return this.createSecurityScope(createdSecurityGroup.data.id, securityGroup.securityScopes, idmAdministratorAccessToken);
            })
            .then((_) => {
                return createdSecurityGroup;
            });
    };

    this.grantPermissions = function(claims, permissions, orgId, trustedAccessToken, idmAdministratorAccessToken){
        var guidHelper = new GuidHelper();
        var guid = guidHelper.createGuid();

        this.getProtectedContextRegistration('User', 'ProtectedContextRegistration_Organization_User', trustedAccessToken)
            .then((pcr) => {
                var permissionProfile = {
                    organizationid: orgId,
                    isHidden: true,
                    permissionProfileName: `profileName_${guid}`,
                    permissionProfileDescription: `description_${guid}`,
                    permissionSets: [
                        {
                            protectedContextRegistrationId: pcr.id,
                            permissions: {
                                resourceName: `resourceName_${guid}`,
                                objectActions: permissions,
                                propertyActions: null,
                                nestedResources: null
                            }
                        }
                    ]
                };

                return this.createPermissionProfileWithSets(permissionProfile, orgId, idmAdministratorAccessToken);
            })
            .then((permissionProfile) => {
                var securityGroup = {
                    groupName: `group_${guid}`,
                    groupDescription: `group_${guid} description`,
                    appliesToAllEmployees: false,
                    claims: claims,
                    isHidden: true,
                    securityScopes: {
                        PermissionProfileId: permissionProfile.data.id,
                        DepartmentAdministrationContext: 'AllDepartments',
                        EmployeeAdministrationContext: 'AllEmployees',
                        JobTypeAdministrationContext: 'AllJobTypes',
                        LocationAdministrationContext: 'AllLocations',
                    }
                };

                return this.createSecurityGroupWithScopes(securityGroup, orgId, idmAdministratorAccessToken);
            })
            .then((securityGroup) => {
            });
    };
};


module.exports = permissionsServiceClient;
